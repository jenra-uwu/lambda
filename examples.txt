; BOOLEANS AND BRANCHING
true = λx y.x
false = λx y.y ; same as 0
not = λp.p false true
and = λp q.p q p
or = λp q.p p q
xor = λp q.p (not q) q
if = λb T F.((b T) F)

; NUMBER OPERATIONS
succ = λn.λs z.s (n s z)
pred = λn.λs z.n (λg h.h (g s)) (λu.z) (λu.u)
+ = λm n.λs z.(m s) (n s z)
* = λn m.λs z.n (m s) z
- = λm n.(n pred) m
even? = λn.n not true
odd? = λx.not (even? x)
zero? = λn.n (λx.false) true
leq? = λm n.zero? (- m n)
lt? = λa b.not (leq? b a)
gt? = λa b.not (leq? a b)
eq? = λm n.and (leq? m n) (leq? n m)
neq? = (not (eq? a b)) ; "not equal"
geq? = λa b.(leq? b a)

; GENERATING NUMBERS WITH RUN
0 = λs z.z ; same as false
1 = run succ 0
2 = run succ 1
3 = run + 2 1
4 = run * 2 2
5 = (λs.(λz.(s (s (s (s (s z)))))))
7 = run succ (succ 5)
6 = run pred 7
10 = run succ (+ 3 6)
9 = run pred 10
8 = run - 10 2

; LINKED LISTS
cons = λx y.λf.f x y
car = λp.p true
cdr = λp.p false
null = λx.true
null? = λp.p (λx y.false) ; true if null, false if a pair, UNDEFINED otherwise

; Y COMBINATOR
Y = λf. (λx. f(x x))  (λx. f(x x))

; FUN FUNCTIONS THAT USE Y
factorial = Y λf.λn.(if (zero? n) 1 (* n (f (- n 1))))
fib = Y λf.λn.if (leq? n) n (+ (f (- n 1)) (f (- n 2)))
; divpair returns a cons box of the quotient and remainder of a division
divpair = Y (λg.λq.λa b. lt? a b (cons q a) (g (succ q) (- a b) b)) 0
/ = λa b. car (divpair a b)
% = λa b. cdr (divpair a b)
